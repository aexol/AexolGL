# macro to find packages on the host OS
if(ANDROID)
    macro( _e_find_host_package )
        set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
        set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )
        set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )
        if( CMAKE_HOST_WIN32 )
            SET( WIN32 1 )
            SET( UNIX )
        elseif( CMAKE_HOST_APPLE )
            SET( APPLE 1 )
            SET( UNIX )
        endif()
        find_package( ${ARGN} )
        SET( WIN32 )
        SET( APPLE )
        SET( UNIX 1 )
        set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )
        set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
        set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
    endmacro()

    macro ( _e_find_host_external_project)
        set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
        set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER)
        set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER)
        if( CMAKE_HOST_WIN32 )
            SET( WIN32 1 )
            SET( UNIX )
        elseif( CMAKE_HOST_APPLE )
            SET( APPLE 1 )
            SET( UNIX )
        endif()
        ExternalProject_Add(${ARGN})
        SET( WIN32 )
        SET( APPLE )
        SET( UNIX 1 )
        set (CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY)
        set (CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
        set (CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
    endmacro ()


    # macro to find programs on the host OS
    macro( _e_find_host_program )
        set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER )
        set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY NEVER )
        set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE NEVER )
        if( CMAKE_HOST_WIN32 )
            SET( WIN32 1 )
            SET( UNIX )
        elseif( CMAKE_HOST_APPLE )
            SET( APPLE 1 )
            SET( UNIX )
        endif()
        find_program( ${ARGN} )
        SET( WIN32 )
        SET( APPLE )
        SET( UNIX 1 )
        set( CMAKE_FIND_ROOT_PATH_MODE_PROGRAM ONLY )
        set( CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY )
        set( CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY )
    endmacro()
elseif(IOS)
    macro( _e_find_host_package )
        find_host_package(${ARGN})
    endmacro()

    macro ( _e_find_host_external_project)
        find_host_external_project(${ARGN})
    endmacro ()

    # macro to find programs on the host OS
    macro( _e_find_host_program )
        find_host_program(${ARGN})
    endmacro()
endif()
set(OpenGLES_SUPPORTED_VERSIONS "3" "2")
foreach(gles_ver ${OpenGLES_SUPPORTED_VERSIONS})
    find_package(OpenGLES${gles_ver})
endforeach()
list(FIND OpenGLES_SUPPORTED_VERSIONS ${AEX_OPENGL_ES_PREFERED_VERSION} ES_VER_IS_SUPPORTED )
if( ( ${ES_VER_IS_SUPPORTED} EQUAL -1 ) AND NOT ( ${AEX_OPENGL_ES_PREFERED_VERSION} EQUAL "0"))
    SET(AEX_OPENGL_ES_PREFERED_VERSION "3" CACHE STRING "AEX_OPENGL_ES_PREFERED_VERSION" )
elseif(${AEX_OPENGL_ES_PREFERED_VERSION} EQUAL "0")
    find_package(OpenGL)
endif()

if(AEX_OPENGL_ES_PREFERED_VERSION)# EQUAL 2.0)
    set(OPENGLES_X_FOUND        ${OPENGLES${AEX_OPENGL_ES_PREFERED_VERSION}_FOUND})
    set(OPENGLES_X_LIBRARIES    ${OPENGLES${AEX_OPENGL_ES_PREFERED_VERSION}_LIBRARIES})
    set(OPENGLES_X_INCLUDE_DIR  ${OPENGLES${AEX_OPENGL_ES_PREFERED_VERSION}_INCLUDE_DIR})
endif()

#else if (${AEX_OPENG_ES_VERSION} EQUAL 3.0)
#    set(OPENGLES_X_FOUND        ${OPENGLES3_FOUND})
#    set(OPENGLES_X_LIBRARIES    ${OPENGLES3_LIBRARIES})
#    set(OPENGLES_X_INCLUDE_DIR  ${OPENGLES3_INCLUDE_DIR})
#endif


if(UNIX OR WIN32 AND NOT APPLE)
    find_package(GLEW)
    if (NOT GLEW_FOUND)
        find_package(OpenGL)
    endif(NOT GLEW_FOUND)
#    if(NOT AEX_USE_GLEW )
#        set (GLEW_FOUND false)
#    endif(NOT AEX_USE_GLEW)
else(UNIX OR WIN32 AND NOT APPLE)
    find_package(OpenGL)
endif(UNIX OR WIN32 AND NOT APPLE)

if(NOT OPENGLES_X_FOUND AND NOT OPENGL_FOUND)
    message(FATAL_ERROR  ${AEX_OPENGL_ES_PREFERED_VERSION} " Either OpenGL or OpenGLES is required.")
endif(NOT OPENGLES_X_FOUND AND NOT OPENGL_FOUND)

#if( GLEW_FOUND AND OPENGLES_X_FOUND)
#    set (GLEW_FOUND false)
#endif( GLEW_FOUND AND OPENGLES_X_FOUND)


if(AEX_USE_GL_LOAD_GEN)
    set (GLEW_FOUND false)
    set (OPENGLES_X_FOUND false)
    find_package(OpenGL)
    if(OPENGL_FOUND)
        set(OPENGL_FOUND false)
        set(GL_LIB ${OPENGL_LIBRARIES})
    endif(OPENGL_FOUND)
    set(BUILD_FOR_GL ON)
    set(HAVE_GL_LOAD_GEN ON)
    message(STATUS "Using glLoadGen.")
endif(AEX_USE_GL_LOAD_GEN)

if(GLEW_FOUND)
    set(BUILD_FOR_GL ON)
    set(GL_LIB ${GLEW_LIBRARY})
    set(GL_INCLUDE ${GLEW_INCLUDE_PATH})
    find_package(OpenGL)
    if(OPENGL_FOUND)
        message(STATUS "OpenGL libs: " "${OPENGL_LIBRARIES}")
        set(GL_LIB ${GL_LIB} ${OPENGL_LIBRARIES})
    else(OPENGL_FOUND)
        message(FATAL_ERROR "Using GLEW but OpenGL not found")
    endif(OPENGL_FOUND)

    message("Using GLEW")
elseif(AEX_USE_GL_LOAD_GEN)
    message(STATUS "Using LoadGen OpenGL. " ${OPENGL_LIBRARIES})
    #set(GL_LIB ${OPENGL_LIBRARIES})
    set(OPENGL_FOUND true)
else()
    if(OPENGLES_X_FOUND AND OPENGL_FOUND)
        if(IOS OR WIN32)
            set(GL_LIB ${OPENGLES_X_LIBRARIES})
            set(GL_INCLUDE ${OPENGLES_X_INCLUDE_DIR})
            message(STATUS "Using OpenGLES${AEX_OPENGL_ES_PREFERED_VERSION}.")
            set(BUILD_FOR_GLES${AEX_OPENGL_ES_PREFERED_VERSION} ON)
            set(BUILD_FOR_GL OFF)
        else()
            set(GL_LIB ${OPENGL_LIBRARIES})
            set(GL_INCLUDE ${OPENGL_INCLUDE_DIR})
            message(STATUS "Using OpenGL.")
            set(BUILD_FOR_GLES${AEX_OPENGL_ES_PREFERED_VERSION} OFF)
            set(BUILD_FOR_GL ON)
        endif()
    elseif(OPENGL_FOUND)
        if(NOT IOS)
            set(GL_LIB ${OPENGL_LIBRARIES})
            set(GL_INCLUDE ${OPENGL_INCLUDE_DIR})
            message(STATUS "Using OpenGL.")
            set(BUILD_FOR_GLES${AEX_OPENGL_ES_PREFERED_VERSION} OFF)
            set(BUILD_FOR_GL ON)
        else(NOT IOS)
            message(FATAL_ERROR "iOS build requires OpenGLES instead of OpenGL")
        endif(NOT IOS)
    elseif(OPENGLES_X_FOUND)
        set(GL_LIB ${OPENGLES_X_LIBRARIES})
        set(GL_INCLUDE ${OPENGLES_X_INCLUDE_DIR})
        if(ANDROID)
            find_package(EGL)
        endif(ANDROID)
        message(STATUS "Using OpenGLES${AEX_OPENGL_ES_PREFERED_VERSION}.")
        set(BUILD_FOR_GLES${AEX_OPENGL_ES_PREFERED_VERSION} ON)
        set(BUILD_FOR_GL OFF)
    elseif(NOT OPENGLES_X_FOUND AND NOT OPENGL_FOUND  AND NOT AEX_USE_GL_LOAD_GEN)
        message(FATAL_ERROR "OpenGL or OpenGLES is required")
    endif(OPENGLES_X_FOUND AND OPENGL_FOUND)
endif()

set(BOOST_PARTS system filesystem thread)
if(ANDROID AND NOT "${ANDROID_NDK_ABI_NAME}" STREQUAL "x86")
    set(BOOST_PARTS ${BOOST_PARTS} atomic)
endif()
if(CMAKE_COMPILER_IS_GNUCC)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-variadic-macros")
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion OUTPUT_VARIABLE GCC_VERSION)
    if(GCC_VERSION VERSION_LESS 4.9) #Uncoment when libgcc will implement atomic_*** for shared_ptr
        message(STATUS "GCC is less than 4.9, ver=${GCC_VERSION}")
    endif(GCC_VERSION VERSION_LESS 4.9)
    set(BOOST_PARTS ${BOOST_PARTS} regex)

    set(USING_BOOST ON) #Parts of boost library are mendatory, but not all of it, by default we try to use std library and fall back to boost if it fails
    #    ENDIF(GCC_VERSION VERSION_LESS 4.9)
endif(CMAKE_COMPILER_IS_GNUCC)

#FIND_PACKAGE(AexolGL REQUIRED)
find_package(SDL2 REQUIRED)
find_package(SDL2_image REQUIRED)
find_package(SDL2_ttf REQUIRED)
find_package(Freetype REQUIRED)
find_package(Ogg REQUIRED)
find_package(Vorbis REQUIRED)
find_package(VorbisFile REQUIRED)
find_package(Alut REQUIRED)
find_package(CDS REQUIRED)
find_package(Boost COMPONENTS ${BOOST_PARTS} REQUIRED)
find_package(OpenAL REQUIRED)
find_package(JSONCPP REQUIRED)
find_package(assimp)
find_package(ZLIB)
find_package(PythonLibs ${AEX_PYTHON_VERSION})
find_package(ffi)
if(PYTHON_PROJECT)
    if(DEFINED ENV{HOST_PYTHON})
        set(PYTHON_EXECUTABLE $ENV{HOST_PYTHON})
        set(PYTHON_FOUND TRUE)
    elseif(NOT ANDROID AND NOT IOS)
        find_package(PythonInterp REQUIRED)
    else()
        _e_find_host_package(PythonInterp REQUIRED)
    endif()
endif(PYTHON_PROJECT)

if(PYTHONLIBS_FOUND AND NOT NO_PYTHON)
    set(USING_PYTHON ON)
endif()

set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${SDL2IMAGE_LIBRARY})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${SDL2TTF_LIBRARY})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${SDL2_LIBRARY})
if(NOT WIN32)
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${FREETYPE_LIBRARY})
endif()
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${VORBIS_LIBRARIES})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${VorbisFile_LIBRARIES})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${OGG_LIBRARIES})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${ALUT_LIBRARIES})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${CDS_LIBRARY})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${Boost_LIBRARIES})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${OPENAL_LIBRARY})
set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${JSONCPP_LIBRARY})

# If assimp found, use it.
if(ASSIMP_FOUND AND ZLIB_FOUND)
    set(USING_ASSIMP ON)
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${assimp_LIBRARIES})
endif()

# Android specific requirements such as -llog and -landroid
if(ANDROID)
    find_package(Freetype REQUIRED)
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${FREETYPE_LIBRARY})
    find_package(PNG REQUIRED)
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${PNG_LIBRARIES})
    set(NEEDED_SYSTEM_LIBRARIES ${GL_LIB})
    set(NEEDED_SYSTEM_LIBRARIES ${NEEDED_SYSTEM_LIBRARIES} ${EGL_LIBRARY})
    set(NEEDED_SYSTEM_LIBRARIES ${NEEDED_SYSTEM_LIBRARIES} ${ZLIB_LIBRARIES})
    set(NEEDED_SYSTEM_LIBRARIES ${NEEDED_SYSTEM_LIBRARIES} ${CMAKE_DL_LIBS})
    set(NEEDED_SYSTEM_LIBRARIES ${NEEDED_SYSTEM_LIBRARIES} log android)
    foreach(system_lib ${NEEDED_SYSTEM_LIBRARIES})
        list(REMOVE_ITEM NEEDED_LIBRARIES ${system_lib})
    endforeach(system_lib ${NEEDED_SYSTEM_LIBRARIES})
else()
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${GL_LIB})
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${CMAKE_DL_LIBS})
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${ZLIB_LIBRARIES})
endif()

# MSVC ucrt dependencies.
if(MSVC)
    set(NEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${FREETYPE_LIBRARY} msvcrt vcruntime ucrt)
endif()

# Set minimal interface libraries.
set(INTERFACE_LIBRARIES ${CDS_LIBRARY} ${Boost_LIBRARIES})
find_library(SDL2MAIN_LIBRARY
  NAMES SDL2main
  HINTS
  $ENV{SDL2DIR}
  PATH_SUFFIXES lib64 lib
  PATHS
  /sw
  /opt/local
  /opt/csw
  /opt
)

# Add python support.
if(USING_PYTHON)
    if(IOS OR ANDROID)
        _e_find_host_package(NumPy REQUIRED)
        set(PNEEDED_LIBRARIES ${FFI_LIBRARY})
    else(IOS OR ANDROID)
        find_package(NumPy REQUIRED)
    endif(IOS OR ANDROID)
    if(IOS)
        set(PFORCE_LOAD_LIBRARIES ${FORCE_LOAD_LIBRARIES} ${PYTHON_LIBRARIES})
    else()
        set(PNEEDED_LIBRARIES ${NEEDED_LIBRARIES} ${PYTHON_LIBRARIES})
    endif()
endif()
if(MSVC)
    link_directories(${CDS_LIBRARY_DIRS})
endif()

# FBModule
set(BUILD_FBModule TRUE)
if(IOS)
    find_package(FacebookSDK)
    if(FacebookSDK_FOUND)
        set(BUILD_FBModule TRUE)
    else()
        set(BUILD_FBModule FALSE)
    endif()
endif()
# HDWModule
set(BUILD_HDWModule TRUE)
