/* DONT TOUCH THIS FILE !!!
 IT IS AUTO GENERATED BY J2CPP TOOL (made by Aexol::Darek) */
#ifndef COM_AEXOLGL_CAMERA_BRIDGE
#define COM_AEXOLGL_CAMERA_BRIDGE

#include <jni.h>
#include <vector>
#include <thread>
#include <cassert>
#include <aex/Common.hpp>

namespace {
    const char* java_package = "com.aexolgl.android.camera";
    const char* java_package_slashy = "com/aexolgl/android/camera";
}

class com_aexolgl_camera_Bridge { 
private: // tables for jni IDs
	  jmethodID m_methods[100] ;
	  jclass m_jclass ;
	  JNIEnv* m_env ;
	  std::vector<jobject> m_jobjects ;
	  bool m_methodLoaded[100] ;
	  std::thread::id m_tid ;
private: 
	 template <typename ... Ts> 
	 jobject STATIC_getCam__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[12] == false)
 			 assert(" Pls invoke LOAD_STATIC_getCam__I before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[12], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getCam__I(JNIEnv* env){
	 if(m_methodLoaded[12] == false){
			 m_methodLoaded[12] = true;
             auto camDeviceClass = aex::string("(I)L")+java_package_slashy+"/CameraDevice;";
			 m_methods[12] = env->GetStaticMethodID(m_jclass, "getCam", camDeviceClass.c_str());
		}

}
protected: 
public: 
	com_aexolgl_camera_Bridge(JNIEnv* env){
		for(int i = 0 ; i < 74; i++){
			m_methodLoaded[i] = false;
		}
		m_env = env;
        auto bridgeClass = aex::string(java_package_slashy)+"/Bridge";
		m_jclass = m_env->FindClass(bridgeClass.c_str());
		m_tid = std::this_thread::get_id();

	}
	 bool checkThread() {
		 std::thread::id id = std::this_thread::get_id();
		 if(id == m_tid) return true; else return false;
	 }	 template <typename ... Ts> 
	 jobject  com_aexolgl_camera_Bridge_ (JNIEnv* env, Ts ... ts)  { 
	 	 if(m_methodLoaded[0] == false)
 			 assert(" Pls invoke LOAD_com_aexolgl_camera_Bridge_ before using it "); 
		 jobject val =  env->NewObject(m_jclass, m_methods[0], ts...); 
		 return val; 
	 }

	 void LOAD_com_aexolgl_camera_Bridge_(JNIEnv* env){
	 if(m_methodLoaded[0] == false){
			 m_methodLoaded[0] = true;
			 m_methods[0] = env->GetMethodID(m_jclass, "<init>", "()V");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_SUCCESS_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[1] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_SUCCESS_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[1], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_SUCCESS_(JNIEnv* env){
	 if(m_methodLoaded[1] == false){
			 m_methodLoaded[1] = true;
			 m_methods[1] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_SUCCESS", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_FAILURE_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[2] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_FAILURE_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[2], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_FAILURE_(JNIEnv* env){
	 if(m_methodLoaded[2] == false){
			 m_methodLoaded[2] = true;
			 m_methods[2] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_FAILURE", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_IS_OPENED_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[3] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_IS_OPENED_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[3], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_IS_OPENED_(JNIEnv* env){
	 if(m_methodLoaded[3] == false){
			 m_methodLoaded[3] = true;
			 m_methods[3] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_IS_OPENED", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_IS_NOT_OPENED_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[4] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_IS_NOT_OPENED_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[4], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_IS_NOT_OPENED_(JNIEnv* env){
	 if(m_methodLoaded[4] == false){
			 m_methodLoaded[4] = true;
			 m_methods[4] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_IS_NOT_OPENED", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_OPENING_ERROR_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[5] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_OPENING_ERROR_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[5], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_OPENING_ERROR_(JNIEnv* env){
	 if(m_methodLoaded[5] == false){
			 m_methodLoaded[5] = true;
			 m_methods[5] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_OPENING_ERROR", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_NO_CAMERA_WITH_PROVIDED_ID_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[6] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_NO_CAMERA_WITH_PROVIDED_ID_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[6], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_NO_CAMERA_WITH_PROVIDED_ID_(JNIEnv* env){
	 if(m_methodLoaded[6] == false){
			 m_methodLoaded[6] = true;
			 m_methods[6] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_NO_CAMERA_WITH_PROVIDED_ID", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_CAMERA_NO_PERMISSION_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[7] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_CAMERA_NO_PERMISSION_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[7], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_CAMERA_NO_PERMISSION_(JNIEnv* env){
	 if(m_methodLoaded[7] == false){
			 m_methodLoaded[7] = true;
			 m_methods[7] = env->GetStaticMethodID(m_jclass, "CONST_CAMERA_NO_PERMISSION", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_PARAMETER_SUPPORTED_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[8] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_PARAMETER_SUPPORTED_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[8], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_PARAMETER_SUPPORTED_(JNIEnv* env){
	 if(m_methodLoaded[8] == false){
			 m_methodLoaded[8] = true;
			 m_methods[8] = env->GetStaticMethodID(m_jclass, "CONST_PARAMETER_SUPPORTED", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_CONST_PARAMETER_NOT_SUPPORTED_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[9] == false)
 			 assert(" Pls invoke LOAD_STATIC_CONST_PARAMETER_NOT_SUPPORTED_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[9], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_CONST_PARAMETER_NOT_SUPPORTED_(JNIEnv* env){
	 if(m_methodLoaded[9] == false){
			 m_methodLoaded[9] = true;
			 m_methods[9] = env->GetStaticMethodID(m_jclass, "CONST_PARAMETER_NOT_SUPPORTED", "()I");
		}

}
	 template <typename ... Ts> 
	 void STATIC_onPause_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[10] == false)
 			 assert(" Pls invoke LOAD_STATIC_onPause_ before using it "); 
		   env->CallStaticVoidMethod(m_jclass, m_methods[10], ts...); 
		  
	 }

	 void LOAD_STATIC_onPause_(JNIEnv* env){
	 if(m_methodLoaded[10] == false){
			 m_methodLoaded[10] = true;
			 m_methods[10] = env->GetStaticMethodID(m_jclass, "onPause", "()V");
		}

}
	 template <typename ... Ts> 
	 void STATIC_onResume_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[11] == false)
 			 assert(" Pls invoke LOAD_STATIC_onResume_ before using it "); 
		   env->CallStaticVoidMethod(m_jclass, m_methods[11], ts...); 
		  
	 }

	 void LOAD_STATIC_onResume_(JNIEnv* env){
	 if(m_methodLoaded[11] == false){
			 m_methodLoaded[11] = true;
			 m_methods[11] = env->GetStaticMethodID(m_jclass, "onResume", "()V");
		}

}
	 template <typename ... Ts> 
	 void STATIC_setErrorMessage__String (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[13] == false)
 			 assert(" Pls invoke LOAD_STATIC_setErrorMessage__String before using it "); 
		   env->CallStaticVoidMethod(m_jclass, m_methods[13], ts...); 
		  
	 }

	 void LOAD_STATIC_setErrorMessage__String(JNIEnv* env){
	 if(m_methodLoaded[13] == false){
			 m_methodLoaded[13] = true;
			 m_methods[13] = env->GetStaticMethodID(m_jclass, "setErrorMessage", "(Ljava/lang/String;)V");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getErrorMessage__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[14] == false)
 			 assert(" Pls invoke LOAD_STATIC_getErrorMessage__I before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[14], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getErrorMessage__I(JNIEnv* env){
	 if(m_methodLoaded[14] == false){
			 m_methodLoaded[14] = true;
			 m_methods[14] = env->GetStaticMethodID(m_jclass, "getErrorMessage", "(I)Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 void STATIC_setIsJavaTextureOwner__ZI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[15] == false)
 			 assert(" Pls invoke LOAD_STATIC_setIsJavaTextureOwner__ZI before using it "); 
		   env->CallStaticVoidMethod(m_jclass, m_methods[15], ts...); 
		  
	 }

	 void LOAD_STATIC_setIsJavaTextureOwner__ZI(JNIEnv* env){
	 if(m_methodLoaded[15] == false){
			 m_methodLoaded[15] = true;
			 m_methods[15] = env->GetStaticMethodID(m_jclass, "setIsJavaTextureOwner", "(ZI)V");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getNumberOfCameras_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[16] == false)
 			 assert(" Pls invoke LOAD_STATIC_getNumberOfCameras_ before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[16], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getNumberOfCameras_(JNIEnv* env){
	 if(m_methodLoaded[16] == false){
			 m_methodLoaded[16] = true;
			 m_methods[16] = env->GetStaticMethodID(m_jclass, "getNumberOfCameras", "()I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_open__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[17] == false)
 			 assert(" Pls invoke LOAD_STATIC_open__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[17], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_open__I(JNIEnv* env){
	 if(m_methodLoaded[17] == false){
			 m_methodLoaded[17] = true;
			 m_methods[17] = env->GetStaticMethodID(m_jclass, "open", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_release__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[18] == false)
 			 assert(" Pls invoke LOAD_STATIC_release__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[18], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_release__I(JNIEnv* env){
	 if(m_methodLoaded[18] == false){
			 m_methodLoaded[18] = true;
			 m_methods[18] = env->GetStaticMethodID(m_jclass, "release", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_updateTextureIfNeeded__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[19] == false)
 			 assert(" Pls invoke LOAD_STATIC_updateTextureIfNeeded__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[19], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_updateTextureIfNeeded__I(JNIEnv* env){
	 if(m_methodLoaded[19] == false){
			 m_methodLoaded[19] = true;
			 m_methods[19] = env->GetStaticMethodID(m_jclass, "updateTextureIfNeeded", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getTextureID__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[20] == false)
 			 assert(" Pls invoke LOAD_STATIC_getTextureID__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[20], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getTextureID__I(JNIEnv* env){
	 if(m_methodLoaded[20] == false){
			 m_methodLoaded[20] = true;
			 m_methods[20] = env->GetStaticMethodID(m_jclass, "getTextureID", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_autoFocus__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[21] == false)
 			 assert(" Pls invoke LOAD_STATIC_autoFocus__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[21], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_autoFocus__I(JNIEnv* env){
	 if(m_methodLoaded[21] == false){
			 m_methodLoaded[21] = true;
			 m_methods[21] = env->GetStaticMethodID(m_jclass, "autoFocus", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_startPreview__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[22] == false)
 			 assert(" Pls invoke LOAD_STATIC_startPreview__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[22], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_startPreview__I(JNIEnv* env){
	 if(m_methodLoaded[22] == false){
			 m_methodLoaded[22] = true;
			 m_methods[22] = env->GetStaticMethodID(m_jclass, "startPreview", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_stopPreview__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[23] == false)
 			 assert(" Pls invoke LOAD_STATIC_stopPreview__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[23], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_stopPreview__I(JNIEnv* env){
	 if(m_methodLoaded[23] == false){
			 m_methodLoaded[23] = true;
			 m_methods[23] = env->GetStaticMethodID(m_jclass, "stopPreview", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jintArray STATIC_getSupportedPreviewSizes__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[24] == false)
 			 assert(" Pls invoke LOAD_STATIC_getSupportedPreviewSizes__I before using it "); 
		 jintArray val =  (jintArray) env->CallStaticObjectMethod(m_jclass, m_methods[24], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getSupportedPreviewSizes__I(JNIEnv* env){
	 if(m_methodLoaded[24] == false){
			 m_methodLoaded[24] = true;
			 m_methods[24] = env->GetStaticMethodID(m_jclass, "getSupportedPreviewSizes", "(I)[I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setPreviewSize__III (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[25] == false)
 			 assert(" Pls invoke LOAD_STATIC_setPreviewSize__III before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[25], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setPreviewSize__III(JNIEnv* env){
	 if(m_methodLoaded[25] == false){
			 m_methodLoaded[25] = true;
			 m_methods[25] = env->GetStaticMethodID(m_jclass, "setPreviewSize", "(III)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setDisplayOrientation__II (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[26] == false)
 			 assert(" Pls invoke LOAD_STATIC_setDisplayOrientation__II before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[26], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setDisplayOrientation__II(JNIEnv* env){
	 if(m_methodLoaded[26] == false){
			 m_methodLoaded[26] = true;
			 m_methods[26] = env->GetStaticMethodID(m_jclass, "setDisplayOrientation", "(II)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setParameter__II (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[27] == false)
 			 assert(" Pls invoke LOAD_STATIC_setParameter__II before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[27], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setParameter__II(JNIEnv* env){
	 if(m_methodLoaded[27] == false){
			 m_methodLoaded[27] = true;
			 m_methods[27] = env->GetStaticMethodID(m_jclass, "setParameter", "(II)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_isSupported__II (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[28] == false)
 			 assert(" Pls invoke LOAD_STATIC_isSupported__II before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[28], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_isSupported__II(JNIEnv* env){
	 if(m_methodLoaded[28] == false){
			 m_methodLoaded[28] = true;
			 m_methods[28] = env->GetStaticMethodID(m_jclass, "isSupported", "(II)I");
		}

}
	 template <typename ... Ts> 
	 jintArray STATIC_getZoomRatios__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[29] == false)
 			 assert(" Pls invoke LOAD_STATIC_getZoomRatios__I before using it "); 
		 jintArray val =  (jintArray) env->CallStaticObjectMethod(m_jclass, m_methods[29], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getZoomRatios__I(JNIEnv* env){
	 if(m_methodLoaded[29] == false){
			 m_methodLoaded[29] = true;
			 m_methods[29] = env->GetStaticMethodID(m_jclass, "getZoomRatios", "(I)[I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getZoomAndroid__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[30] == false)
 			 assert(" Pls invoke LOAD_STATIC_getZoomAndroid__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[30], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getZoomAndroid__I(JNIEnv* env){
	 if(m_methodLoaded[30] == false){
			 m_methodLoaded[30] = true;
			 m_methods[30] = env->GetStaticMethodID(m_jclass, "getZoomAndroid", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getZoomAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[31] == false)
 			 assert(" Pls invoke LOAD_STATIC_getZoomAexolGL__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[31], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getZoomAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[31] == false){
			 m_methodLoaded[31] = true;
			 m_methods[31] = env->GetStaticMethodID(m_jclass, "getZoomAexolGL", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getZoomMaxAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[32] == false)
 			 assert(" Pls invoke LOAD_STATIC_getZoomMaxAexolGL__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[32], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getZoomMaxAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[32] == false){
			 m_methodLoaded[32] = true;
			 m_methods[32] = env->GetStaticMethodID(m_jclass, "getZoomMaxAexolGL", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setZoomAexolGL__FI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[33] == false)
 			 assert(" Pls invoke LOAD_STATIC_setZoomAexolGL__FI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[33], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setZoomAexolGL__FI(JNIEnv* env){
	 if(m_methodLoaded[33] == false){
			 m_methodLoaded[33] = true;
			 m_methods[33] = env->GetStaticMethodID(m_jclass, "setZoomAexolGL", "(FI)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setZoomSmoothAexolGL__FI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[34] == false)
 			 assert(" Pls invoke LOAD_STATIC_setZoomSmoothAexolGL__FI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[34], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setZoomSmoothAexolGL__FI(JNIEnv* env){
	 if(m_methodLoaded[34] == false){
			 m_methodLoaded[34] = true;
			 m_methods[34] = env->GetStaticMethodID(m_jclass, "setZoomSmoothAexolGL", "(FI)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_isSmoothlyZoomSupported__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[35] == false)
 			 assert(" Pls invoke LOAD_STATIC_isSmoothlyZoomSupported__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[35], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_isSmoothlyZoomSupported__I(JNIEnv* env){
	 if(m_methodLoaded[35] == false){
			 m_methodLoaded[35] = true;
			 m_methods[35] = env->GetStaticMethodID(m_jclass, "isSmoothlyZoomSupported", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getFocalLength__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[36] == false)
 			 assert(" Pls invoke LOAD_STATIC_getFocalLength__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[36], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getFocalLength__I(JNIEnv* env){
	 if(m_methodLoaded[36] == false){
			 m_methodLoaded[36] = true;
			 m_methods[36] = env->GetStaticMethodID(m_jclass, "getFocalLength", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getExposureEVAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[37] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureEVAexolGL__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[37], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureEVAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[37] == false){
			 m_methodLoaded[37] = true;
			 m_methods[37] = env->GetStaticMethodID(m_jclass, "getExposureEVAexolGL", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getMinExposureEVAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[38] == false)
 			 assert(" Pls invoke LOAD_STATIC_getMinExposureEVAexolGL__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[38], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getMinExposureEVAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[38] == false){
			 m_methodLoaded[38] = true;
			 m_methods[38] = env->GetStaticMethodID(m_jclass, "getMinExposureEVAexolGL", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getMaxExposureEVAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[39] == false)
 			 assert(" Pls invoke LOAD_STATIC_getMaxExposureEVAexolGL__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[39], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getMaxExposureEVAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[39] == false){
			 m_methodLoaded[39] = true;
			 m_methods[39] = env->GetStaticMethodID(m_jclass, "getMaxExposureEVAexolGL", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setExposureEVAexolGL__FI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[40] == false)
 			 assert(" Pls invoke LOAD_STATIC_setExposureEVAexolGL__FI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[40], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setExposureEVAexolGL__FI(JNIEnv* env){
	 if(m_methodLoaded[40] == false){
			 m_methodLoaded[40] = true;
			 m_methods[40] = env->GetStaticMethodID(m_jclass, "setExposureEVAexolGL", "(FI)I");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getExposureCompensationStep__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[41] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureCompensationStep__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[41], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureCompensationStep__I(JNIEnv* env){
	 if(m_methodLoaded[41] == false){
			 m_methodLoaded[41] = true;
			 m_methods[41] = env->GetStaticMethodID(m_jclass, "getExposureCompensationStep", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getExposureCompensationAndroid__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[42] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureCompensationAndroid__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[42], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureCompensationAndroid__I(JNIEnv* env){
	 if(m_methodLoaded[42] == false){
			 m_methodLoaded[42] = true;
			 m_methods[42] = env->GetStaticMethodID(m_jclass, "getExposureCompensationAndroid", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getExposureCompensationMinAndroid__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[43] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureCompensationMinAndroid__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[43], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureCompensationMinAndroid__I(JNIEnv* env){
	 if(m_methodLoaded[43] == false){
			 m_methodLoaded[43] = true;
			 m_methods[43] = env->GetStaticMethodID(m_jclass, "getExposureCompensationMinAndroid", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getExposureCompensationMaxAndroid__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[44] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureCompensationMaxAndroid__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[44], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureCompensationMaxAndroid__I(JNIEnv* env){
	 if(m_methodLoaded[44] == false){
			 m_methodLoaded[44] = true;
			 m_methods[44] = env->GetStaticMethodID(m_jclass, "getExposureCompensationMaxAndroid", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getMaxNumExposureAreas__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[45] == false)
 			 assert(" Pls invoke LOAD_STATIC_getMaxNumExposureAreas__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[45], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getMaxNumExposureAreas__I(JNIEnv* env){
	 if(m_methodLoaded[45] == false){
			 m_methodLoaded[45] = true;
			 m_methods[45] = env->GetStaticMethodID(m_jclass, "getMaxNumExposureAreas", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jfloatArray STATIC_getExposureAreasAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[46] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExposureAreasAexolGL__I before using it "); 
		 jfloatArray val =  (jfloatArray) env->CallStaticObjectMethod(m_jclass, m_methods[46], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExposureAreasAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[46] == false){
			 m_methodLoaded[46] = true;
			 m_methods[46] = env->GetStaticMethodID(m_jclass, "getExposureAreasAexolGL", "(I)[F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setExposureAreasAexolGL__ArrayarrayFI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[47] == false)
 			 assert(" Pls invoke LOAD_STATIC_setExposureAreasAexolGL__ArrayarrayFI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[47], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setExposureAreasAexolGL__ArrayarrayFI(JNIEnv* env){
	 if(m_methodLoaded[47] == false){
			 m_methodLoaded[47] = true;
			 m_methods[47] = env->GetStaticMethodID(m_jclass, "setExposureAreasAexolGL", "([FI)I");
		}

}
	 template <typename ... Ts> 
	 jfloatArray STATIC_getFocusDistances__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[48] == false)
 			 assert(" Pls invoke LOAD_STATIC_getFocusDistances__I before using it "); 
		 jfloatArray val =  (jfloatArray) env->CallStaticObjectMethod(m_jclass, m_methods[48], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getFocusDistances__I(JNIEnv* env){
	 if(m_methodLoaded[48] == false){
			 m_methodLoaded[48] = true;
			 m_methods[48] = env->GetStaticMethodID(m_jclass, "getFocusDistances", "(I)[F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_getMaxNumFocusAreas__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[49] == false)
 			 assert(" Pls invoke LOAD_STATIC_getMaxNumFocusAreas__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[49], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getMaxNumFocusAreas__I(JNIEnv* env){
	 if(m_methodLoaded[49] == false){
			 m_methodLoaded[49] = true;
			 m_methods[49] = env->GetStaticMethodID(m_jclass, "getMaxNumFocusAreas", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jfloatArray STATIC_getFocusAreasAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[50] == false)
 			 assert(" Pls invoke LOAD_STATIC_getFocusAreasAexolGL__I before using it "); 
		 jfloatArray val =  (jfloatArray) env->CallStaticObjectMethod(m_jclass, m_methods[50], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getFocusAreasAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[50] == false){
			 m_methodLoaded[50] = true;
			 m_methods[50] = env->GetStaticMethodID(m_jclass, "getFocusAreasAexolGL", "(I)[F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setFocusAreasAexolGL__ArrayarrayFI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[51] == false)
 			 assert(" Pls invoke LOAD_STATIC_setFocusAreasAexolGL__ArrayarrayFI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[51], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setFocusAreasAexolGL__ArrayarrayFI(JNIEnv* env){
	 if(m_methodLoaded[51] == false){
			 m_methodLoaded[51] = true;
			 m_methods[51] = env->GetStaticMethodID(m_jclass, "setFocusAreasAexolGL", "([FI)I");
		}

}
	 template <typename ... Ts> 
	 jfloatArray STATIC_getPreviewFPSRangeAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[52] == false)
 			 assert(" Pls invoke LOAD_STATIC_getPreviewFPSRangeAexolGL__I before using it "); 
		 jfloatArray val =  (jfloatArray) env->CallStaticObjectMethod(m_jclass, m_methods[52], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getPreviewFPSRangeAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[52] == false){
			 m_methodLoaded[52] = true;
			 m_methods[52] = env->GetStaticMethodID(m_jclass, "getPreviewFPSRangeAexolGL", "(I)[F");
		}

}
	 template <typename ... Ts> 
	 jfloatArray STATIC_getSupportedPreviewFPSRangesAexolGL__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[53] == false)
 			 assert(" Pls invoke LOAD_STATIC_getSupportedPreviewFPSRangesAexolGL__I before using it "); 
		 jfloatArray val =  (jfloatArray) env->CallStaticObjectMethod(m_jclass, m_methods[53], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getSupportedPreviewFPSRangesAexolGL__I(JNIEnv* env){
	 if(m_methodLoaded[53] == false){
			 m_methodLoaded[53] = true;
			 m_methods[53] = env->GetStaticMethodID(m_jclass, "getSupportedPreviewFPSRangesAexolGL", "(I)[F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setPreviewFPSRangeAexolGL__FFI (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[54] == false)
 			 assert(" Pls invoke LOAD_STATIC_setPreviewFPSRangeAexolGL__FFI before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[54], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setPreviewFPSRangeAexolGL__FFI(JNIEnv* env){
	 if(m_methodLoaded[54] == false){
			 m_methodLoaded[54] = true;
			 m_methods[54] = env->GetStaticMethodID(m_jclass, "setPreviewFPSRangeAexolGL", "(FFI)I");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getHorizontalViewAngle__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[55] == false)
 			 assert(" Pls invoke LOAD_STATIC_getHorizontalViewAngle__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[55], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getHorizontalViewAngle__I(JNIEnv* env){
	 if(m_methodLoaded[55] == false){
			 m_methodLoaded[55] = true;
			 m_methods[55] = env->GetStaticMethodID(m_jclass, "getHorizontalViewAngle", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jfloat STATIC_getVerticalViewAngle__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[56] == false)
 			 assert(" Pls invoke LOAD_STATIC_getVerticalViewAngle__I before using it "); 
		 jfloat val =  (jfloat) env->CallStaticFloatMethod(m_jclass, m_methods[56], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getVerticalViewAngle__I(JNIEnv* env){
	 if(m_methodLoaded[56] == false){
			 m_methodLoaded[56] = true;
			 m_methods[56] = env->GetStaticMethodID(m_jclass, "getVerticalViewAngle", "(I)F");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_takePicture__String_IIIIII (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[57] == false)
 			 assert(" Pls invoke LOAD_STATIC_takePicture__String_IIIIII before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[57], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_takePicture__String_IIIIII(JNIEnv* env){
	 if(m_methodLoaded[57] == false){
			 m_methodLoaded[57] = true;
			 m_methods[57] = env->GetStaticMethodID(m_jclass, "takePicture", "(Ljava/lang/String;IIIIII)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_startVideo__String_III (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[58] == false)
 			 assert(" Pls invoke LOAD_STATIC_startVideo__String_III before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[58], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_startVideo__String_III(JNIEnv* env){
	 if(m_methodLoaded[58] == false){
			 m_methodLoaded[58] = true;
			 m_methods[58] = env->GetStaticMethodID(m_jclass, "startVideo", "(Ljava/lang/String;III)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_stopVideo__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[59] == false)
 			 assert(" Pls invoke LOAD_STATIC_stopVideo__I before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[59], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_stopVideo__I(JNIEnv* env){
	 if(m_methodLoaded[59] == false){
			 m_methodLoaded[59] = true;
			 m_methods[59] = env->GetStaticMethodID(m_jclass, "stopVideo", "(I)I");
		}

}
	 template <typename ... Ts> 
	 jintArray STATIC_getSupportedVideoSizes__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[60] == false)
 			 assert(" Pls invoke LOAD_STATIC_getSupportedVideoSizes__I before using it "); 
		 jintArray val =  (jintArray) env->CallStaticObjectMethod(m_jclass, m_methods[60], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getSupportedVideoSizes__I(JNIEnv* env){
	 if(m_methodLoaded[60] == false){
			 m_methodLoaded[60] = true;
			 m_methods[60] = env->GetStaticMethodID(m_jclass, "getSupportedVideoSizes", "(I)[I");
		}

}
	 template <typename ... Ts> 
	 jintArray STATIC_getSupportedPictureSizes__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[61] == false)
 			 assert(" Pls invoke LOAD_STATIC_getSupportedPictureSizes__I before using it "); 
		 jintArray val =  (jintArray) env->CallStaticObjectMethod(m_jclass, m_methods[61], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getSupportedPictureSizes__I(JNIEnv* env){
	 if(m_methodLoaded[61] == false){
			 m_methodLoaded[61] = true;
			 m_methods[61] = env->GetStaticMethodID(m_jclass, "getSupportedPictureSizes", "(I)[I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_isSupportedPictureFormat__II (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[62] == false)
 			 assert(" Pls invoke LOAD_STATIC_isSupportedPictureFormat__II before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[62], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_isSupportedPictureFormat__II(JNIEnv* env){
	 if(m_methodLoaded[62] == false){
			 m_methodLoaded[62] = true;
			 m_methods[62] = env->GetStaticMethodID(m_jclass, "isSupportedPictureFormat", "(II)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_setRotation__II (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[63] == false)
 			 assert(" Pls invoke LOAD_STATIC_setRotation__II before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[63], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_setRotation__II(JNIEnv* env){
	 if(m_methodLoaded[63] == false){
			 m_methodLoaded[63] = true;
			 m_methods[63] = env->GetStaticMethodID(m_jclass, "setRotation", "(II)I");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getFlatten__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[64] == false)
 			 assert(" Pls invoke LOAD_STATIC_getFlatten__I before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[64], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getFlatten__I(JNIEnv* env){
	 if(m_methodLoaded[64] == false){
			 m_methodLoaded[64] = true;
			 m_methods[64] = env->GetStaticMethodID(m_jclass, "getFlatten", "(I)Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getUserDataDirectory_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[65] == false)
 			 assert(" Pls invoke LOAD_STATIC_getUserDataDirectory_ before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[65], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getUserDataDirectory_(JNIEnv* env){
	 if(m_methodLoaded[65] == false){
			 m_methodLoaded[65] = true;
			 m_methods[65] = env->GetStaticMethodID(m_jclass, "getUserDataDirectory", "()Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getDownloadCacheDirectory_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[66] == false)
 			 assert(" Pls invoke LOAD_STATIC_getDownloadCacheDirectory_ before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[66], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getDownloadCacheDirectory_(JNIEnv* env){
	 if(m_methodLoaded[66] == false){
			 m_methodLoaded[66] = true;
			 m_methods[66] = env->GetStaticMethodID(m_jclass, "getDownloadCacheDirectory", "()Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getExternalStorageDirectory_ (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[67] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExternalStorageDirectory_ before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[67], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExternalStorageDirectory_(JNIEnv* env){
	 if(m_methodLoaded[67] == false){
			 m_methodLoaded[67] = true;
			 m_methods[67] = env->GetStaticMethodID(m_jclass, "getExternalStorageDirectory", "()Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 jobject STATIC_getExternalStoragePublicDirectory__I (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[68] == false)
 			 assert(" Pls invoke LOAD_STATIC_getExternalStoragePublicDirectory__I before using it "); 
		 jobject val =  (jobject) env->CallStaticObjectMethod(m_jclass, m_methods[68], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_getExternalStoragePublicDirectory__I(JNIEnv* env){
	 if(m_methodLoaded[68] == false){
			 m_methodLoaded[68] = true;
			 m_methods[68] = env->GetStaticMethodID(m_jclass, "getExternalStoragePublicDirectory", "(I)Ljava/lang/String;");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_mkdir__String (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[69] == false)
 			 assert(" Pls invoke LOAD_STATIC_mkdir__String before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[69], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_mkdir__String(JNIEnv* env){
	 if(m_methodLoaded[69] == false){
			 m_methodLoaded[69] = true;
			 m_methods[69] = env->GetStaticMethodID(m_jclass, "mkdir", "(Ljava/lang/String;)I");
		}

}
	 template <typename ... Ts> 
	 jint STATIC_openGallery__String (JNIEnv* env, Ts ... ts)   { 
	 	 if(m_methodLoaded[70] == false)
 			 assert(" Pls invoke LOAD_STATIC_openGallery__String before using it "); 
		 jint val =  (jint) env->CallStaticIntMethod(m_jclass, m_methods[70], ts...); 
		 return val; 
	 }

	 void LOAD_STATIC_openGallery__String(JNIEnv* env){
	 if(m_methodLoaded[70] == false){
			 m_methodLoaded[70] = true;
			 m_methods[70] = env->GetStaticMethodID(m_jclass, "openGallery", "(Ljava/lang/String;)I");
		}

        }
	virtual ~com_aexolgl_camera_Bridge(){
	}
};

#endif //COM_AEXOLGL_CAMERA_BRIDGE
