# dict(GET <dict> <key> [<key> ...] <output_variabl>)
# dict(SET <dict> <key> <value> [<key> <value> ...])
# dict(GET_KEYS <dict> <output_variable>)
# dict(HAS <dict> <key> <output_variabl>)
# dict(REMOVE_KEY <dict> <key> [<key> ...])
function(dict operation dictvar)
    # Find output variable name.
    list(LENGTH ARGN _args_len)
    math(EXPR _output_variable_idx "${_args_len} - 1")
    list(GET ARGN ${_output_variable_idx} output_variable_name)

    # Get length of list backing dict.
    list(LENGTH ${dictvar} _dict_len)

    # If backing list is not divisible by 2 then stop.
    math(EXPR _len_mod "${_dict_len} % 2")
    if(NOT _len_mod EQUAL 0)
        message(FATAL_ERROR "Bad dict variable.")
    endif()
    math(EXPR _last_idx "${_dict_len} - 1")

    # Find indexes of requested keys
    if(operation STREQUAL _FIND_KEY)
        math(EXPR _last_arg_idx "${_output_variable_idx} - 1")
        # If backing list is empty then mark everything as notfound and return.
        if(_dict_len EQUAL 0)
            foreach(arg_idx RANGE 0 ${_last_arg_idx})
                list(GET ARGN ${arg_idx} key)
                set(values ${values} "${key}-NOTFOUND")
            endforeach()
            set(${output_variable_name} ${values} PARENT_SCOPE)
            return()
        else()
            # Find keys and return their index in backing list,
            # if key is not found return <key>-NOTFOUND
            set(indices_found)
            foreach(arg_idx RANGE 0 ${_last_arg_idx})
                list(GET ARGN ${arg_idx} key)
                # Prefix key with KEY: so that matches while searching
                # are unique.
                list(FIND ${dictvar} "KEY: ${key}" key_idx)
                if(NOT key_idx EQUAL -1)
                    set(indices_found ${indices_found} ${key_idx})
                else()
                    set(indices_found ${indices_found} "${key}-NOTFOUND")
                endif()
            endforeach()
        endif()
        set(${output_variable_name} ${indices_found} PARENT_SCOPE)
        return()
    elseif(operation STREQUAL GET)
        # Get values at keys from dict.
        dict(_FIND_KEY ${dictvar} ${ARGN})
        set(key_indexes ${${output_variable_name}})
        set(values)
        foreach(key_idx ${key_indexes})
            if(key_idx OR key_idx EQUAL 0)
                math(EXPR value_idx "${key_idx} + 1")
                list(GET ${dictvar} ${value_idx} _prefixed_value)
                string(SUBSTRING ${_prefixed_value} 7 -1 value)
                set(values ${values} ${value})
            else()
                set(values ${values} ${key_idx})
            endif()
        endforeach()
        set(${output_variable_name} ${values} PARENT_SCOPE)
    elseif(operation STREQUAL SET)
        # Extract keys from function arguments.
        foreach(idx RANGE 0 ${_output_variable_idx} 2)
            list(GET ARGN ${idx} key)
            set(keys ${keys} ${key})
        endforeach()
        # Check if keys already in dict.
        dict(_FIND_KEY ${dictvar} ${keys} _keys_indices)
        list(LENGTH _keys_indices args_key_count)
        math(EXPR args_key_count "${args_key_count} - 1")

        foreach(args_key_idx RANGE 0 ${args_key_count})
            list(GET _keys_indices ${args_key_idx} key_idx)
            math(EXPR args_key_idx "${args_key_idx} * 2")
            # If key not in dict append it at the end
            if(key_idx MATCHES ".*-NOTFOUND")
                list(GET ARGN ${args_key_idx} key)
                set(${dictvar} ${${dictvar}} "KEY: ${key}" "VALUE: ")
                list(LENGTH ${dictvar} value_idx)
                math(EXPR value_idx "${value_idx} - 1")
            else()
                # Otherwise just swap value
                math(EXPR value_idx "${key_idx} + 1")
            endif()
            math(EXPR args_value_idx "${args_key_idx} + 1")
            list(GET ARGN ${args_value_idx} value)
            list(LENGTH ${dictvar} ll)
            math(EXPR ll "${ll} - 1")
            list(REMOVE_AT ${dictvar} ${value_idx})
            # Prefix all values with VALUE: for matching.
            if(${value_idx} EQUAL ll)
                list(APPEND ${dictvar} "VALUE: ${value}")
            else()
                list(INSERT ${dictvar} ${value_idx} "VALUE: ${value}")
            endif()
        endforeach()
        set(${dictvar} ${${dictvar}} PARENT_SCOPE)
    elseif(operation STREQUAL GET_KEYS)
        list(LENGTH ${dictvar} len)
        if(NOT len)
            return()
        endif()
        math(EXPR len "${len} - 1")
        foreach(key_idx RANGE 0 ${len} 2)
            list(GET ${dictvar} ${key_idx} _prefixed_key)
            string(SUBSTRING ${_prefixed_key} 5 -1 key)
            set(keys ${keys} ${key})
        endforeach()
        set(${output_variable_name} ${keys} PARENT_SCOPE)
    elseif(operation STREQUAL HAS)
        list(GET ARGN 0 key)
        list(FIND ${dictvar} "KEY: ${key}" found)
        if(found EQUAL -1)
            set(${output_variable_name} False PARENT_SCOPE)
        else()
            set(${output_variable_name} True PARENT_SCOPE)
        endif()
    elseif(operation STREQUAL REMOVE_KEY)
        # TODO
    endif()
endfunction()
